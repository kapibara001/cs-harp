using System;
using System.Collections.Generic; // <---- Подключили библеотеку

namespace names {
    class Myclass {
        static void Main() {
        /*
        Цикл foreach(типДанных n in массив) макимально подходит для работы с массивами
        С помощью него можно перебирать как одномерные, так и двумерные массивы. 
        */
            short[] nums = {5, 6, 7, 8, 9, 4, 1};
            
            foreach(short el in nums) {
                //Console.WriteLine("El: {0}", el);
            }

        
        /* 
        Динамические массивы - не сообщают нам точное количество элементов, которое будет внутри этого массива. Их минусом является их 
            "прожорливость" ресурсов ПК. Он занимает сразу много места, чтобы туда можно было добавить оргомное количество элементов, 
            в отличие от массива, в котором мы обозначили количество элементов сразу. 

            Чтобы реализовать такие массивы, надо подключить библеоткеу 
            System.Collections.Generic 
        */
            List<int> numbers = new List<int>() {4, 82, 231, 24}; // Выделенеие памяти в этом случае использовать обязательно
            // Можно сразу написать какую-то часть списка, а можно и поставить ";" после >()
           
            numbers.Add(40); // Добавление числа в динамический список numbers через .Add
            numbers.Add(10);
            numbers.Add(2);
            foreach(int el in numbers) {
                Console.Write(el + " ");
            }
            Console.WriteLine("Добавление в список через .Add()");

            numbers.Remove(40); // Удаление числа 40 из списка
            numbers.Remove(2);
            foreach(int el in numbers) {
                Console.Write(el + " ");
            }
            Console.WriteLine("Удаление числа из списка через .Remove()");

            numbers.Sort(); // Сортировка списка по возрастанию
            foreach(int el in numbers) {
                Console.Write(el + " ");
            }
            Console.WriteLine("Сортировка списка по возрастанию через .Sort()");

            numbers.Reverse(); // "Переворот списка"
            foreach(int el in numbers) {
                Console.Write(el + " ");
            }
            Console.WriteLine("Переворот списка по через .Reverse()");

        /* 
        Еще интересные функции для работы со списками:
            .Clear() - полная очистка списка от элементов
            .CopyTo() - клонирование всего массива
            .Exists() - проверка существования элемента по его значению
            .Find() - позволяет найти определнный элемент по его значению и возвращает индекс
        */
            














        }
    }
}